{
	"nodes":[
		{"id":"880d6b54a8c9c966","type":"group","x":-980,"y":-280,"width":4940,"height":3400,"label":"1. Principles of Computer Science"},
		{"id":"da59da918889533b","type":"group","x":-140,"y":-220,"width":800,"height":3140,"label":"1. Computational Thinking"},
		{"id":"a2922d67e3a133ed","type":"group","x":680,"y":-220,"width":800,"height":2380,"label":"2. Data"},
		{"id":"2779231e9b61e5be","type":"group","x":-120,"y":120,"width":760,"height":1720,"label":"2. Algorithms"},
		{"id":"0e9b4504a353bc03","type":"group","x":-960,"y":-220,"width":800,"height":1120,"label":"0. Required Prior Knowledge"},
		{"id":"8a3eed7305fa203f","type":"group","x":1500,"y":-220,"width":800,"height":1040,"label":"3. Computers"},
		{"id":"354cef3ae2a7b14d","type":"group","x":2320,"y":-220,"width":800,"height":1040,"label":"4. Networks"},
		{"id":"03d002f618d6de26","type":"group","x":3140,"y":-220,"width":800,"height":1040,"label":"5. Issues and Impacts"},
		{"id":"890800aa7efeed4a","type":"group","x":-940,"y":-180,"width":760,"height":1060,"label":"Flowchart"},
		{"id":"f96e4d7f184dbae4","type":"group","x":-920,"y":20,"width":720,"height":840,"color":"#ffff00","label":"Example"},
		{"id":"4eac5c009b1f8f1e","type":"group","x":-120,"y":2200,"width":760,"height":700,"label":"3. Truth Tables"},
		{"id":"d28d4339b656a313","type":"group","x":700,"y":-180,"width":760,"height":620,"label":"1. Binary"},
		{"id":"2b5f57e4674b3382","type":"group","x":2340,"y":-100,"width":760,"height":600,"label":"1. Networks"},
		{"id":"ee7efbafda5e88b7","type":"group","x":1520,"y":-100,"width":760,"height":400,"label":"1. Hardware"},
		{"id":"707194ed05bbd2b6","type":"group","x":700,"y":1740,"width":760,"height":400,"label":"3. Data Storage and Compression"},
		{"id":"fe897b36523d8ce9","type":"group","x":-100,"y":2380,"width":440,"height":500,"color":"#ffff00","label":"Example"},
		{"id":"af86044a9fa64b2c","type":"group","x":-120,"y":-180,"width":760,"height":260,"label":"1. Decomposition and Abstraction"},
		{"id":"33afd711d2b47140","type":"group","x":720,"y":-20,"width":420,"height":400,"label":"Signed and Unsignes Integers"},
		{"id":"cd5fbbb1f9aa9871","type":"text","text":">**Flowchart:** A representative [[diagram]] designed to illustrate a [[workflow]] or [[process]]. Commonly used to plan or understand an [[algorithm]]. \n","x":-920,"y":-160,"width":720,"height":60},
		{"id":"4485be4adab80f1d","type":"file","file":"Computer Science/1. Principles of Computer Science/Images/flowchart-symbols.png","x":-920,"y":-80,"width":719,"height":63},
		{"id":"d75d988979800d36","type":"text","text":">**Binary:** A [[Mathematics/Table of Definitions#^def-maths-number-system|system of counting]] utilising only two [[Mathematics/Table of Definitions#^def-maths-digit|digits]], being 0 and 1. Essential to a [[Computer Science/Table of Definitions#^def-computing-digital|digital]] [[Computer Science/Table of Definitions#^def-computing-pc|computer]] [[Trilogy Physics Higher/Table of Definitions#^def-physics-system|system]].\n\nBinary is used to represent all data and instructions used within a computer, computer system or network. ","x":720,"y":-160,"width":720,"height":100},
		{"id":"5b4fea2f7300c50a","type":"text","text":"To calculate the number of states that can be represented in a [[binary]] number, use the [[expression]]: $$2^{\\text{Number of binary digits}}$$","x":1160,"y":-40,"width":280,"height":100,"color":"#ff8000"},
		{"id":"45c05cebc4807feb","type":"text","text":"","x":740,"y":0,"width":250,"height":60},
		{"id":"a56ed2c44892d6b0","type":"text","text":"Binary data storage is most often represented via a binary multiple. ","x":720,"y":1760,"width":640,"height":60},
		{"id":"b6c167eccf6d0ce1","type":"text","text":">**Decomposition:** The process of deconstructing a large or complex issue into smaller, easier to manage and understand segments. ","x":-100,"y":-160,"width":720,"height":60},
		{"id":"84df598f4c8502bd","type":"text","text":">**Subprogram:** A small program written and utilised within a larger program. ","x":260,"y":-80,"width":360,"height":60},
		{"id":"79fdadd2630d107b","type":"text","text":"These three concepts are vital to the understanding of [[computer science]]. [[Decomposition]] and [[abstraction]] allow us to understand the process of designing [[Computer Science/Table of Definitions#^23145a|software]], whilst [[subprograms]] allow us to use these concepts practically. ","x":-100,"y":0,"width":720,"height":60},
		{"id":"63ebfe0d66cfea1c","type":"text","text":">**Abstraction:** The removal of excessive or unnecessary detail","x":-100,"y":-80,"width":340,"height":60},
		{"id":"a2fde12871170f5a","type":"text","text":"\n**Network:** A [[system]] of multiple interconnected [[computers]], usually with the intent of transmitting and sharing [[data]].","x":2340,"y":-200,"width":760,"height":60},
		{"id":"e70ecdafb92744fa","type":"text","text":">**Computer:** An [[Trilogy Physics Higher/Table of Definitions#^def-physics-electricity|electronic]] [[Computer Science/Table of Definitions#^def-computing-device|device]] that manipulates [[Computer Science/Table of Definitions#^def-computing-data|data]] so as to serve a particular function. ","x":1520,"y":-200,"width":760,"height":60},
		{"id":"5f993ab423259804","type":"text","text":">**Von Neuman stored program concept:** A concept, created by Von Neuman, detailing the specifics of a [[Computer Science/Table of Definitions#^def-computing-CPU|CPU]] [[Computer Science/Table of Definitions#^def-computing-architecture|architecture]] containing the common [[Computer Science/Table of Definitions#^def-computing-component|components]] of a [[Computer Science/Table of Definitions#^def-computing-CPU|CPU]], such as the [[Computer Science/Table of Definitions#^def-computing-ALU|ALU]], [[Computer Science/Table of Definitions#^def-computing-CU|CU]] and [[Computer Science/Table of Definitions#^def-computing-register|registers]] enabling the treatment of [[Computer Science/Table of Definitions#^def-computing-instruction|instructions]] as [[Computer Science/Table of Definitions#^def-computing-data|data]], used as the basis to the entirety of [[Computer Science/Table of Definitions#^def-computing-CS|computer science]].\n\n","x":1540,"y":-80,"width":720,"height":80},
		{"id":"76ea4a4f4cea12bb","type":"file","file":"Computer Science/1. Principles of Computer Science/Images/cpu-diagram.png","x":1880,"y":20,"width":391,"height":220},
		{"id":"fb90764f72839d23","type":"text","text":">**Algorithm:** A series of ordered [[Computer Science/Table of Definitions#^def-computing-instruction|instructions]] designed to carry out a specific task or in order to solve a recurring problem and contained within a [[computer program]] or [[subprogram]]. ","x":-100,"y":140,"width":720,"height":60},
		{"id":"ce3f134b2ad8f72e","type":"text","text":"Why did it take me so long to realise that pseudo-code is just simplified COBOL","x":-960,"y":920,"width":250,"height":60},
		{"id":"6255d5c1afae4bb1","type":"text","text":"You are required to be able to understand and write algorithms using sequence, selection, repetition, iteration and input processing. ","x":-100,"y":220,"width":340,"height":380},
		{"id":"9e3332026780fdec","type":"text","text":"To convert from bits to any measure in a binary system, use the expression: \n$\\text$","x":840,"y":1920,"width":735,"height":60},
		{"id":"193b0cbc6811b95b","type":"file","file":"Computer Science/1. Principles of Computer Science/Images/flow-example.png","x":-580,"y":40,"width":360,"height":497},
		{"id":"55614e12fa022a85","type":"text","text":"**[[Python]] Interpretation:**\n\n```python\nuserImput = int(input(\"1) Square\\n2) Triangle\\n\\nEnter a number: \"))\n\nif userImput == 1:\n    width = int(input(\"Width? \"))\n    print(width**2)\nelif userImput == 2:\n    width = int(input(\"Width? \"))\n    height = int(input(\"Height? \"))\n    print((width*height)/2)\n```","x":-900,"y":560,"width":680,"height":280,"color":"#ffff00"},
		{"id":"c47592f9822e86ef","type":"text","text":">**Truth table:** A table based representation of all the possible [[values]] returned by a [[logical]] [[expression]].\n\nAn AND gate will only output '1' if both inputs are equal to '1' and will otherwise output '0'. An OR gate will output 1 if $\\geq 1 \\text{ input} = 1$ and will otherwise equal 0. A NOT gate will always output a toggled variant of the input. ","x":-100,"y":2220,"width":720,"height":120},
		{"id":"10238a7c05cf698a","type":"file","file":"Computer Science/1. Principles of Computer Science/Images/gates-symbols-vertical.png","x":360,"y":2360,"width":264,"height":440},
		{"id":"964f3fd63d50e397","type":"text","text":"**Original [[Pseudo-code]] / [[COBOL]]:** \n\n\tSEND \"Choose '(1) Square' or '(2) Triangle' TO DISPLAY\"\n\tRECIEVE userChoice FROM (INTEGER) KEYBOARD\n\t\n\tIF userChoice = 1 THEN\n\t\tSEND \"Width: \" TO DISPLAY\n\t\tRECIEVE width FROM (INTEGER) KEYBOARD\n\t\tSET area TO width * 2\n\t\tSEND area TO DISPLAY\n\tEND-IF\n\t\n\tIF userChoice = 2 THEN\n\t\tSEND \"Width: \" TO DISPLAY\n\t\tRECIEVE width FROM (INTEGER) KEYBOARD\n\t\tSEND \"Height: \" TO DISPLAY\n\t\tRECIEVE height FROM (INTEGER) KEYBOARD\n\t\tSET area TO (width * height) / 2\n\t\tSEND area TO DISPLAY","x":-900,"y":40,"width":300,"height":500,"color":"#ffff00"},
		{"id":"6d4be31ef4af0044","type":"file","file":"Computer Science/1. Principles of Computer Science/Images/gates-example.png","x":-80,"y":2400,"width":399,"height":99},
		{"id":"8d6adb3d9cb5fa48","type":"text","text":"**Test Data and Results:** \n\n| A   | B   | C   | D   | E   | X   |\n| --- | --- | --- | --- | --- | --- |\n| 0   | 0   | 0   | 1   | 1   | 0   |\n| 0   | 0   | 1   | 1   | 1   | 1   |\n| 0   | 1   | 0   | 0   | 0   | 0   |\n| 1   | 0   | 0   | 1   | 1   | 0   |\n| 0   | 1   | 1   | 0   | 0   | 0   |\n| 1   | 0   | 1   | 1   | 1   | 1   |\n| 1   | 1   | 0   | 0   | 1   | 0   |\n| 1   | 1   | 1   | 0   | 1   | 1   |\n","x":-80,"y":2520,"width":400,"height":340},
		{"id":"b6a59ed873681771","type":"text","text":"These logical operations are the basis upon which microprocessors are built upon. ","x":360,"y":2820,"width":260,"height":60,"color":"#008000"}
	],
	"edges":[
		{"id":"fbe23ca09f750057","fromNode":"ce3f134b2ad8f72e","fromSide":"left","toNode":"964f3fd63d50e397","toSide":"left"}
	]
}